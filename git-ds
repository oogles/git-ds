#!/usr/bin/env bash

# Defaults for global settings
output_path='.git/ds'
max_diff_files=10

# Update global settings with values from the config file, if any.
# NOTE: Do this before creating any other variables used by the program, so
# that a manually-modified config file can't be used to alter expected behaviour.
if [[ -f .git/ds.cfg ]]; then
    source .git/ds.cfg
fi

# Constants
TEMP_FILE='.git/.dstemp.patch'
BRANCH=$(git symbolic-ref --short -q HEAD)

# Other settings
label=''

# TODO
watching=0

# TODO: Keep a log

subcommand="$1"
shift  # move past subcommand argument

function get_option() {

    local option="$1"
    shift  # move past target option in argument list

    # Use the explicitly-provided value for the given option if provided
    while [[ $# -gt 0 ]]; do
        if [[ $1 = "$option" ]]; then
            case $1 in
            -o)
                output_path="$2"
                ;;
            -n)
                max_diff_files="$2"
                ;;
            -l)
                label="$2"
                ;;
            *)
                echo "Unknown option: $option"
                exit 1
            esac
            return
        fi

        shift  # move to next item in argument list
    done

}

function run() {

    local output_path="$1"
    local max_diff_files="$2"
    local label="$3"

    local dir="$output_path/$BRANCH"
    mkdir -p "$dir"

    local diff=$({ git --no-pager diff HEAD; for next in $( git ls-files --others --exclude-standard ) ; do git --no-pager diff --no-index /dev/null $next; done; })

    echo "$diff" > "$TEMP_FILE"

    local count=$(ls -1 "$dir" | wc -l)
    if [[ "$count" -gt 0 ]]; then
        # Get the most and least recent previous diff files
        unset -v newest
        unset -v oldest
        for file in "$dir"/*; do
            [[ "$file" -nt "$newest" ]] && newest="$file"
            [[ -z "$oldest" || "$file" -ot "$oldest" ]] && oldest="$file"
        done

        # Only write a new file if this diff actually differs from the previous one
        local diff_comp=$(diff "$TEMP_FILE" "$newest")
        if [[ ! "$diff_comp" ]]; then
            return
        fi

        # Remove the oldest file if there are more than the configured max
        # number of rotating files
        if [[ "$count" -ge "$max_diff_files" ]]; then
            rm "$oldest"
        fi
    fi

    local filename=$(date '+%Y%m%d-%H%M%S')
    if [[ "$label" ]]; then
        filename="$filename-$label"
    fi

    cp "$TEMP_FILE" "$dir/$filename.patch"

}

case "$subcommand" in
-h|--help)
    echo "Show help"
    ;;
--config)
    get_option '-o' "$@"
    get_option '-n' "$@"

    if [[ ! "$@" ]]; then
        if [[ ! -f .git/ds.cfg ]]; then
            echo "No config file found. Default settings:"
        else
            echo "Config file loaded. Settings:"
        fi

        echo "Output path: $output_path"
        echo "Max. number of diff files per branch: $max_diff_files"
    else
        # TODO
        printf "output_path='$output_path'\nmax_diff_files=$max_diff_files" > .git/ds.cfg
        echo "Config file saved."
    fi

    ;;
--run)
    if [[ -f "$TEMP_FILE" ]]; then
        echo "Diff already in progress."
        exit 1
    fi

    get_option '-o' "$@"
    get_option '-n' "$@"
    get_option '-l' "$@"
    echo "$max_diff_files"
    # TODO: Accept label option
    run "$output_path" "$max_diff_files" "$label"

    # Always remove the temporary diff file, regardless of the outcome of run
    rm "$TEMP_FILE"
    ;;
--watch)
    if [[ watching -eq 1 ]]; then
        git ds
        exit 0
    fi

    echo "Register hooks + cron"

    # register hooks
    # post-checkout:
        # branch checkout: can't leave a branch with uncommitted changes (they'll follow you), so write a blank diff for the previous branch
        # file checkout: update the diff to ensure it excludes the checked-out file
    # post-commit: update the diff to ensure it excludes the files just committed
        # does this run on git commit --amend?
    # stash?
        # no available hooks, will have to be a blind spot

    # TODO: handle existing hooks
    # TODO: register cron job
        # configurable interval

    ;;
--unwatch)
    if [[ watching -eq 0 ]]; then
        echo "Repository is not currently being watched."
        exit 0
    fi

    echo "Unregister hooks + cron"
    ;;
--clean)
    echo "Clean diff files"
    ;;
*)
    echo "Show status + statistics"
    ;;
esac
